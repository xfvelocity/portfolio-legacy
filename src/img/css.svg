<svg xmlns="http://www.w3.org/2000/svg" width="426" height="479" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <path d="M385.5 432l-172.8 46.6L39.9 432 0 0h425.3l-39.8 432z" fill="#2062AF"/>
  <path d="M212.7 35v406.4l.4.2 139.8-37.7 32.3-369H212.7z" fill="#3C9CD7"/>
  <path d="M212.5 143L88.8 194.5l4.1 51 119.6-51.1L339.7 140l5.3-52.2L212.5 143z" fill="#fff"/>
  <path d="M88.8 194.5l4.1 51 119.6-51.1V143L88.8 194.5z" fill="url(#paint0_linear)"/>
  <path d="M345 87.8L212.5 143v51.4L339.7 140l5.3-52.2z" fill="url(#paint1_linear)"/>
  <path d="M89 194.5l4.1 51 183.5.6-4.1 68-60.4 17-58-14.6-3.5-42.2h-54l7 81.4L212.8 388l108.4-31.7 14.1-161.8H89z" fill="url(#paint2_linear)"/>
  <path opacity=".1" d="M212.5 194.5H88.8l4.1 51 119.6.4v-51.4zm0 136.5l-.6.1-58-14.6-3.5-42.2h-54l7 81.4L212.6 388v-57z" fill="#000"/>
  <path d="M77.7 87.8H345l-5.3 52.2H84.2l-6.5-52.2z" fill="url(#paint3_linear)"/>
  <path opacity=".1" d="M212.5 87.8H77.7l6.5 52.2h128.3V87.8z" fill="#000"/>
  <defs>
    <linearGradient id="paint0_linear" x1="150.7" y1="245.5" x2="150.7" y2="143" gradientUnits="userSpaceOnUse">
      <stop offset=".4" stop-color="#D1D3D4" stop-opacity="0"/>
      <stop offset="1" stop-color="#D1D3D4"/>
    </linearGradient>
    <linearGradient id="paint1_linear" x1="278.7" y1="194.4" x2="278.7" y2="87.8" gradientUnits="userSpaceOnUse">
      <stop offset=".4" stop-color="#D1D3D4" stop-opacity="0"/>
      <stop offset="1" stop-color="#D1D3D4"/>
    </linearGradient>
    <linearGradient id="paint2_linear" x1="89" y1="291.3" x2="335.2" y2="291.3" gradientUnits="userSpaceOnUse">
      <stop stop-color="#E8E7E5"/>
      <stop offset="1" stop-color="#fff"/>
    </linearGradient>
    <linearGradient id="paint3_linear" x1="77.7" y1="113.9" x2="345" y2="113.9" gradientUnits="userSpaceOnUse">
      <stop stop-color="#E8E7E5"/>
      <stop offset="1" stop-color="#fff"/>
    </linearGradient>
  </defs>
</svg>