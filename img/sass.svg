<svg xmlns="http://www.w3.org/2000/svg" width="509" height="379" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <path d="M438.4 217.7c-17.7.1-33 4.4-46 10.7-4.7-9.4-9.4-17.6-10.2-23.7-.9-7.1-2-11.4-.9-20 1-8.4 6-20.5 6-21.5 0-.8-1-5.2-11.2-5.3-10.2 0-19 2-20 4.7-1 2.6-3 8.7-4.3 15-1.8 9.3-20.4 42.2-31 59.5a60.6 60.6 0 01-7-17.4c-.9-7.1-2-11.4-.9-20 1.1-8.4 6-20.5 6-21.5 0-.8-1-5.2-11.2-5.3-10.2 0-19 2-20 4.7-1 2.6-2 9-4.2 15-2.1 6.2-26.8 61-33.3 75.4-3.2 7.3-6.1 13-8.2 17-2 4 0 .3-.3.7L239 291c-1.4 2.5-3 4.9-3.6 4.9-.5 0-1.5-6.6.2-15.7 3.7-19 12.6-48.8 12.5-49.8 0-.5 1.6-5.8-5.8-8.4-7.2-2.7-9.8 1.8-10.4 1.8-.6 0-1 1.5-1 1.5s8-33.4-15.4-33.4c-14.6 0-34.8 15.9-44.8 30.4l-34 18.5-16.4 9-1.1-1.2c-28.3-30-80.6-51.4-78.5-91.9.8-14.7 6-53.5 100.5-100.4 77.5-38.5 139.5-28 150.3-4.5 15.3 33.6-33.2 96-113.7 105-30.6 3.4-46.8-8.5-50.8-12.9-4.3-4.6-4.9-4.8-6.4-4-2.6 1.4-1 5.6 0 8 2.3 6.3 12.2 17.3 29 22.8 14.8 4.9 50.8 7.5 94.3-9.2 48.8-18.9 86.9-71.2 75.7-115-11.4-44.4-85.4-59-155.3-34.3C122.6 27 77.5 50.2 45 80.4 6.5 116.4.4 147.8 2.9 160.8c9 46.5 73.2 76.8 99 99.2l-3.6 2c-12.9 6.3-61.8 31.8-74 58.9-14 30.6 2 52.6 12.8 55.5 33 9.2 66.8-7.3 85.1-34.4 18.2-27.2 16-62.4 7.7-78.5l-.3-.6 10-5.9 18.6-10.5c-3.1 8.6-5.4 18.8-6.6 33.6-1.4 17.4 5.8 39.9 15.1 48.8 4.2 3.8 9.1 4 12.2 4 10.9 0 15.8-9 21.3-19.8a357.2 357.2 0 0012.6-28.4s-7.4 41.2 12.9 41.2c7.4 0 14.8-9.6 18.2-14.5l.6-.9 1.2-1.9v-.2c3-5.1 9.6-16.8 19.5-36.3 12.7-25 25-56.4 25-56.4s1.2 7.7 4.8 20.3c2.2 7.5 7 15.7 10.6 23.7l-4.7 6.5c-2.3 3.2-5 6.6-7.7 10-10.1 12-22.2 25.7-23.8 29.7-1.9 4.6-1.5 8 2.2 10.8 2.7 2 7.4 2.4 12.5 2 9-.6 15.4-2.9 18.6-4.2 5-1.8 10.5-4.5 16-8.4 9.9-7.3 16-17.7 15.3-31.5a63.3 63.3 0 00-5.8-22.2l2.7-4c15.6-22.8 27.6-47.8 27.6-47.8s1.2 7.7 4.9 20.3c1.9 6.4 5.6 13.4 9 20.3a87.8 87.8 0 00-27 34.9c-5.8 16.7-1.3 24.3 7.3 26.1 3.9.8 9.4-1 13.6-2.7a61.4 61.4 0 0017-8.8c10-7.3 19.5-17.5 19-31.2-.3-6.3-2-12.6-4.3-18.5 12.5-5.1 28.6-8 49-5.6 44.1 5.1 52.8 32.6 51.1 44a29.5 29.5 0 01-14 19.8c-3 1.8-4 2.5-3.7 4 .4 2 1.8 1.9 4.5 1.5 3.6-.6 23.1-9.4 23.9-30.5 1.2-27.2-24.6-56.8-70.4-56.5zM98.9 332c-14.6 16-35 22-43.7 16.8-9.4-5.4-5.8-28.8 12.1-45.7a233 233 0 0134.4-25.6l9-5.4 1-.6 2.2-1.4c6.7 24.1.3 45.2-15 62zm106.3-72.1c-5 12.3-15.7 44-22.1 42.2-5.6-1.5-9-25.4-1.1-49.1 4-12 12.3-26.2 17.3-31.7 8-8.9 16.7-11.9 18.9-8.2 2.6 4.7-9.8 39-13 46.8zm87.8 41.8c-2.2 1.1-4.2 1.9-5 1.3-.8-.4.8-1.9.8-1.9s11-11.7 15.3-17.1l8.6-11v1.2c0 14.2-13.6 23.7-19.7 27.5zm67.6-15.4c-1.6-1.2-1.4-4.8 4-16.3a61 61 0 0115-19.3c1 3 1.6 5.8 1.5 8.5-.1 17.7-12.8 24.4-20.5 27.1z" fill="#CF649A"/>
</svg>